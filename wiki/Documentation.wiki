#summary Arduino Wiring documentation for XMC porting
#labels documentation

= Introduction =

Here some deeper documentation of the Arduino Wiring language porting to XMC microcontrollers.

*Note:* this page contains the documentation of only the Wiring language statements that have been ported to XMC microcontrollers.


=Pin mode=

*pinMode(PIN,MODE);*
Set the specified PIN to MODE.

MODE can be:
 * INPUT for receiving digital input
 * INPUT_PULLUP for receiving digital input having pull-up resistor connected
 * INPUT_PULLDW for receiving digital input having pull-down resistor connected
 * OUTPUT for sending digital output
 * PWM for setting pulse width modulation output 

Example:
{{{
pinMode(1,INPUT);
}}}

*Note:* Arduino-to-XMC declares:
{{{
#define INPUT		0
#define OUTPUT		1
#define INPUT_PULLUP	2
#define INPUT_PULLDW	3
#define PWM		4
}}}

=Digital input/output=

*digitalWrite(PIN,DATA);*
Send digtal DATA output to PIN. DATA can be either HIGH or LOW?

Example:
{{{
pinMode(2,OUTPUT);
digitalWrite(2,HIGH);
}}}

*digitalRead(PIN);*
Read digital input from PIN. The result can be either HIGH or LOW.

Example:
{{{
bool PB1state;
 
pinMode(1,INPUT);
PB1state=digitalRead(1);
if(PB1state==HIGH)
{
uart_printf("PIN1 state is high\n");
} else {
uart_printf("PIN1 state is low\n");
}
}}}

=Analog input (ADC)=

*analogRead(ADC_CHANNEL);*
Read analog input, the output value is between 0-4095 representing 0-5V.

Example:
{{{
int AnalogData;

AnalogData=analogRead(A0);
uart_printf("Analog channel 0 input is %d\n",AnalogData);

AnalogData=analogRead(A5);
uart_printf("Analog channel 5 input is %d\n",AnalogData);
}}}

*Note:* ARDUINO-to-XMC pin mapping description is available at https://code.google.com/p/arduino-to-xmc/wiki/XMC1100_BootKit

= Timing =
*millis(void);*
Return the number of milliseconds since the program execution started.

Example:
{{{
uart_printf("This has been running for %lu milliseconds.\r\n",millis());
}}}

*micros();*
Return the number of microseconds since the program execution started.

Example:
{{{
uart_printf("This has been running for %lu microseconds.\r\n",micros());
}}} 

*delay(MILLISECONDS);*
Stop program execution for MILLISECONDS.
*Note:* this cannot be used within interrupt functions!

Example:
{{{
delay(1000); // stop for 1000 milliseconds (1 second)
}}} 

*delayMicroseconds(MICROSECONDS);*
Stop program execution for MICROSECONDS.
*Note:* this cannot be used within interrupt functions!

Example:
{{{
delayMicroseconds(10000); // stop for 10'000 microseconds (10 milliseconds)
}}} 

*Note:* ARDUINO-to-XMC 'delayMicroseconds()' porting description is available at http://code.google.com/p/arduino-to-xmc/wiki/delayMicroseconds

=Random number=

*randomSeed(SEED);*
Choose SEED to be seed of the random number in the program.
SEED must be a number.
To allow the program to ‘attempt’ to randomize the seed put nothing as the SEED.

Example:
To allow program to ‘attempt’ to randomize the seed autmatically
{{{
randomSeed();
}}}
To specify a random seed
{{{
randomSeed(1234);
random(MAX);
}}}
Generate a random number between 0 and MAX-1.

Example:
{{{
int myNumber;
myNumber=random(1000); // get a number between 0 and 999
random(MIN,MAX);
}}}
Generate a random number between MIN and MAX-1.

Example:
{{{
int myNumber;
myNumber=random(1000,2000); // get a number between 1000 and 1999
}}}