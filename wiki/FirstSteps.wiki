#summary First Steps.
#labels FirstSteps,BareMinimum

= First Steps to get Arduino code running on XMC1100 =
You need:
 * The board: Infineon XMC1100 Boot Kit 
 * Environment: DAVE™ – Free Development Platform for Code Generation (DAVE™ 3.1.8) 


== Arduino to XMC Library ==

Download [http://code.google.com/p/arduino-to-xmc/source/browse/tags/Arduino_xmc_cores.zip Arduino_xmc_cores.zip] and unzip in the DAVE 'ws' (e.g. 'C:\UserData\Projects\DAVE3_workspace\ws') or stay tuner to the latest code changes via the Sub Version System (get  howto by reading [https://code.google.com/p/arduino-to-xmc/source/checkout svn].

== Arduino to XMC Project for DAVE™ 3.1.8 ==

Download [http://code.google.com/p/arduino-to-xmc/source/browse/tags/Arduino_XMC1100_BootKit.zip Arduino_XMC1100_BootKit.zip] and unzip in the DAVE 'ws' (e.g. 'C:\UserData\Projects\DAVE3_workspace\ws') or stay tuner to the latest code changes via the Sub Version System (get  howto by reading [https://code.google.com/p/arduino-to-xmc/source/checkout svn].

== Set-Up the Project Space ==

Once the source files are in the DAVE Workspace, you will see something like this:
https://arduino-to-xmc.googlecode.com/svn/wiki/Arduino_XMC1100_DAvE.jpg

Where:
 1 this is the linked 'Arduino_examples' folder
 2 this is the linked 'Arduino_xmc_cores' folder
 3 this is the selected example under compilation (use 'Properties -> Exclude resource from build) 

== Code ==

The setup() function is called when a sketch starts. Use it to initialize variables, pin modes, start using libraries, etc. The setup function will only run once, after each powerup or reset of the Arduino board. 

After creating a setup() function, the loop() function does precisely what its name suggests, and loops consecutively, allowing your program to change and respond as it runs. Code in the loop() section of your sketch is used to actively control the Arduino board. [... see 
http://arduino.cc/en/Tutorial/BareMinimum for more details].

=== main.c ==

I was too lazy to split the main.c into the real 'main()' function part and the Arduino compatible sketch, so I merged both in one file. Here as for example
{{{
/*
 * Main.c
 *
 */

#define ARDUINO
#define ARDUINO_MAIN
#include "Arduino.h"

#include <XMC1100.h>		//SFR declarations of the selected device
#include <DAVE3.h>

// #include Arduino HEADER FILES.
#include "pins_arduino.h"
#include "wiring_digital.h"
#include "wiring_time.h"
#include "wiring_clock.h"

int main(void)
{

	/*
	  *  Wiring Initialization
	  */
	wiring_digital_init();
	wiring_analog_init();

	 /*
	  *  Periferals Initialization
	  */
	DAVE_Init();

	// Arduino's main() function just calls setup() and loop()....
	setup();
	while (1) {
		loop();
		//yield();
	}
}

//****************************************************************************
// 							       ARDUINO SKETCH
//****************************************************************************

/*
  ...

  This example code is in the public domain.
 */


void setup() {
   // put your setup code here, to run once:

}

void loop() {
   // put your main code here, to run repeatedly: 
   
}
//****************************************************************************
// 							       END OF FILE
//****************************************************************************


}}}